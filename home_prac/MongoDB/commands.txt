use dbname      //create or use existing db
show dbs        //show databases
db              //check current db
db.createCollection('Person')     //creates collection names Person
db.Person.insertOne({name : 'Dhara', age : 20, city : 'Morbi'})     //inserts one document
db.Person.insertOne({name : 'Dhara', age : 20, city : 'Morbi'}, {name : 'Hetvi', age : 18})     //inserts many docs
show collections        //displays collections in db
db.Person.find()        //displays all data of person collection
db.Person.findOne()     //shows first doc

-----------------------------------------------------
db.Person.find({ $and [ {Branch : 'CE'}, {SPI : 7} ]})      //shows data with condition AND
db.Person.find({ $or [ {Branch : 'CE'}, {SPI : 7} ]})       //OR condition
db.Person.find({ $and [ {Branch : {$eq : 'CE'}}, {SPI : 7} ]})      //equal condition
db.Person.find({ $and [ {Branch : {$eq : 'CE'}}, {SPI : {$gt : 7} } ]})     //greater than 
db.Person.find({ $and [ {Branch : {$eq : 'CE'}}, {SPI : {$lt : 7} } ]})     //less than 
db.Person.find({ $and [ {Branch : {$in : [ 'CE' , 'IT' ]}}, {SPI : {$gt : 7} } ]})     //IN condition
-----------------------------------------------------

db.Person.find({ $or [ {Branch : 'CE'}, {SPI : 7} ]}, {name : 1})       //condition with field 'name' only
db.Person.find({ $or [ {Branch : 'CE'}, {SPI : 7} ]}, {name : 1, age : 1, id : 0})       //condition with field 'name', 'age'. it will not show 'id'

---------------------------------------------------------

db.Person.find({ $and [ {Branch : {$eq : 'CE'}}, {SPI : 7} ]}) 
db.Person.find().sort({age : -1})       //desc sort by column age
db.Person.find().sort({age : 1})       //Ascending sort by column age
db.Person.drop()        //drops collection Person
db.Person.renameCollection('People')        //to rename person collection with name 'people'

------------------------------------------------------------
db.Person.find().limit(3)       //top 3 records only
db.person.find().skip(2).limit(3)       //skips first 2 and shows 3 records
db.person.find().limit(3).skip(2)       //does the same as above
db.Person.find().skip(3)        //skips first 3

---------------------------------------------------------------

db.users.deleteOne({ name: "John" })        //deletes with name filter
db.users.deleteMany({ age: { $lt: 18 } })   //deletes all rrecords with age less than 18
---------------------------------------------------------------

db.Person.updateOne({no : 4}, {$set :  {name : 'Jenisha'}})     //set name 'Jenisha' where no is 4

db.Person.updateMany({age : 20}, {$set :  {city : 'Morbi'}})    //set field city : Morbi wherever age is 20. creates new if city doesn't exist

db.Person.updateMany({}, {$set : {rank : 2}})       //alter (added new column named 'rank' everywhere bcoz we haven't gave it any condition)

db.Person.updateMany({}, {$inc : {rank : 3}})       //incremented rank +3 everywhere 

db.Person.updateOne(
    { name: "Jenisha" },
    { $set: { age: 30, email: "hellowjenubolu6u@lmao.com" } },
    { upsert: true }
);                                              //'upsert' command. adds new column if doesn't exit (email) and also updated the age column

db.Person.updateOne(
    { name: "Dhara" }, // Filter to find the document
    { $currentDate: { lastUpdated: true } } // Set lastUpdated to the current date
);

db.Person.updateOne(
    { name: "Jenisha" }, // Filter to find the document
    { $rename: { email: "contactEmail" } } // Rename email to contactEmail
);

db.Person.updateMany({ name : "Jenisha"}, {$unset : {contactEmail : ""}})       //to remove (unset) a column

-------------------------------------------------------------------

db.Person.find({}, { _id: 1 }).forEach(doc => print(doc._id.getTimestamp()));       //retrives time stamp from object id.

--------------------------------------------------------------------
db.createCollection("students", {capped : true, size : 5242880, max : 100 })        //create capped collection

db.students.insertOne({ name : 'Durga', age : 22, phone : [1234567890, 0987654321]})        //multivalued document
db.students.find({phone : 1234567890})      //finding multivalued doc

db.students.insertOne({ name : { fname : 'Rani', lname : 'Mehra'}, age : 26})       //composite (Nested) doc
db.students.find({ 'name.lname' : 'Mehra'})     //finding a composite (Nested) doc

select * from students for json auto        //this command in SSMS will retrive the json format of student table data 
-----------------------------------------------------------------------


